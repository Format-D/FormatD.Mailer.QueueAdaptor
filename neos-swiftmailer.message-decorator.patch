Index: Classes/Message.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Classes/Message.php b/Classes/Message.php
--- a/Classes/Message.php	(date 1619640694532)
+++ b/Classes/Message.php	(date 1619640694532)
@@ -21,8 +21,46 @@
  *
  * @Flow\Scope("prototype")
  */
-class Message extends \Swift_Message
+class Message
 {
+
+	/**
+	 * Create a new Message.
+	 *
+	 * Details may be optionally passed into the constructor.
+	 *
+	 * @param string $subject
+	 * @param string $body
+	 * @param string $contentType
+	 * @param string $charset
+	 */
+	public function __construct($subject = null, $body = null, $contentType = null, $charset = null) {
+		$this->message = new \Swift_Message($subject = null, $body = null, $contentType = null, $charset = null);
+	}
+
+	/**
+	 * @return string[]
+	 */
+	public function __sleep() {
+		return ['failedRecipients', 'sent', 'message'];
+	}
+
+	/**
+	 * Pass all calls to $this->message
+	 * 
+	 * @param string $method
+	 * @param array $args
+	 * @return false|mixed
+	 */
+	public function __call($method, $args) {
+		return call_user_func_array(array($this->message, $method), $args);
+	}
+
+	/**
+	 * @var \Swift_Message
+	 */
+	protected $message;
+
     /**
      * @Flow\Inject
      * @var \Neos\SwiftMailer\MailerInterface
@@ -52,7 +90,7 @@
     {
         $this->sent = true;
         $this->failedRecipients = [];
-        return $this->mailer->send($this, $this->failedRecipients);
+        return $this->mailer->send($this->message, $this->failedRecipients);
     }
 
     /**
